AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function + API Gateway to check EC2 status

Parameters:
  TagKeyParam:
    Type: String
    Default: Name
  TagValueParam:
    Type: String
    Default: CF-EC2-Web
  TimeoutSecondsParam:
    Type: Number
    Default: 2

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  EC2StatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          TAG_KEY: !Ref TagKeyParam
          TAG_VALUE: !Ref TagValueParam
          TIMEOUT_SECONDS: !Ref TimeoutSecondsParam
      Code:
        ZipFile: |
          import boto3, json, os, urllib.request
          REGION = os.environ.get("REGION", "eu-west-1")
          TAG_KEY = os.environ.get("TAG_KEY", "Name")
          TAG_VALUE = os.environ.get("TAG_VALUE", "CF-EC2-Web")
          TIMEOUT_SECONDS = int(os.environ.get("TIMEOUT_SECONDS", "2"))

          def http_get(url, timeout):
              req = urllib.request.Request(url, method="GET")
              with urllib.request.urlopen(req, timeout=timeout) as resp:
                  return resp.getcode()

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2', region_name=REGION)
              try:
                  resp = ec2.describe_instances(
                      Filters=[
                          {"Name": "instance-state-name", "Values": ["running"]},
                          {"Name": f"tag:{TAG_KEY}", "Values": [TAG_VALUE]},
                      ]
                  )
                  reservations = resp.get("Reservations", [])
                  if not reservations or not reservations[0].get("Instances"):
                      return {"statusCode": 404, "body": json.dumps({"error":"No matching running instance found"})}

                  instance = reservations[0]["Instances"][0]
                  public_ip = instance.get("PublicIpAddress")
                  if not public_ip:
                      return {"statusCode": 503, "body": json.dumps({"error":"Instance has no public IP"})}

                  try:
                      status = http_get(f"http://{public_ip}", TIMEOUT_SECONDS)
                      health = {"http_status": status, "ok": 200 <= status < 400}
                  except Exception as e:
                      health = {"error": str(e), "ok": False}

                  return {"statusCode": 200, "body": json.dumps({"ec2_ip": public_ip, "health": health})}
              except Exception as e:
                  return {"statusCode": 500, "body": json.dumps({"error": str(e)})}


  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ec2-status-api
      EndpointConfiguration: { Types: [REGIONAL] }

  ApiResourceStatus:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ParentId: !GetAtt ApiGatewayRest.RootResourceId
      PathPart: status

  ApiMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ResourceId: !Ref ApiResourceStatus
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EC2StatusFunction.Arn}/invocations

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EC2StatusFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRest}/*/GET/status

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethodGET
    Properties:
      RestApiId: !Ref ApiGatewayRest
      StageName: prod

Outputs:
  ApiUrl:
    Description: Invoke URL for endpoint status
    Value: !Sub "https://${ApiGatewayRest}.execute-api.${AWS::Region}.amazonaws.com/prod/status"

